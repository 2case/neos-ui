sudo: false
language: php
notifications:
  email: false

#
# Make sure that the selenium driver can connect to the SauceLabs grid.
#
addons:
  sauce_connect: true

#
# Describe the overall PHP env.
#
matrix:
  fast_finish: true
  include:
    - php: 5.6
      env: DB=mysql
services:
  - mysql

#
# Cache the composer and node_modules directory to speed up the the installation of dependencies.
#
cache:
  directories:
    - $HOME/build/PackageFactory/Neos/Packages/Application/PackageFactory.Guevara/node_modules
    - $HOME/.composer/cache
    - $HOME/.nvm/versions/

#
# Install nvm, the node depdencie and setup the some env variables.
#
before_install:
  # Install `nvm` since we are running in a php infrastructure based VM on TravisCI.
  - curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.31.0/install.sh | bash
  - nvm install v4.2.2
  - nvm use

  # Expose the commit message for SauceLabs.
  # The export cannot be placed in the `env` section since there are usecases where this isn't reliable.
  # @see https://github.com/mapbox/node-pre-gyp/issues/196
  - "export COMMIT_MESSAGE=\"$(git log --format=%B --no-merges -n 1)\""
  - export FLOW_CONTEXT=Testing

  # Update composer.
  - composer self-update -q

#
# Install and setup the neos instance.
#
install:
  # Create a working directory for the neos instance and install all neos depedencies.
  - cd ..
  - if [ ! -d "Neos" ]; then mkdir Neos; fi;
  - cp PackageFactory.Guevara/Build/TravisCi/composer* Neos/
  - cd Neos
  - composer install -q
  - if [ ! -d "Packages/Application/PackageFactory.Guevara" ]; then mkdir Packages/Application/PackageFactory.Guevara; fi;

  # Move our cloned repository into the neos working directory.
  - mv ../PackageFactory.Guevara/** Packages/Application/PackageFactory.Guevara/
  - mv ../PackageFactory.Guevara/.babelrc Packages/Application/PackageFactory.Guevara/
  - mv ../PackageFactory.Guevara/.eslintrc Packages/Application/PackageFactory.Guevara/

  # Remove the default login package since our `che!` routes currenctly conflicts with the package.
  - composer remove flowpack/neos-frontendlogin
  - rm -rf Packages/Plugins/Flowpack.Neos.FrontendLogin

  # Create the test database and move the configuration files into place.
  - rm Configuration/Testing/Settings.yaml
  - rm Configuration/Routes.yaml
  - cp Packages/Application/PackageFactory.Guevara/Build/TravisCi/Settings.yaml Configuration/Testing/Settings.yaml
  - cp Packages/Application/PackageFactory.Guevara/Build/TravisCi/Routes.yaml Configuration/Routes.yaml

  # Clear all caches to avoid errors regarding the recently removed FrontendLogin package,
  # setup the database and import the demo site package.
  - rm -rf Data/Temporary/*
  - mysql -e 'create database neos collate utf8_unicode_ci;'
  - ./flow cache:warmup
  - ./flow flow:cache:flush
  - ./flow doctrine:migrate
  - ./flow site:import --package-key=TYPO3.NeosDemoTypo3Org
  - ./flow configuration:show --type Settings --path TYPO3.Flow.security

  # Create the demo backend user.
  - ./flow user:create --username=johndoe --password=demo --first-name=John --last-name=Doe --roles=TYPO3.Neos:Administrator

  # Start the development server and wait a bit to let it correctly boot up.
  - ./flow server:run --port 8081 &
  - sleep 3

  # Change back into the repository directory where the tests will be executed.
  - cd Packages/Application/PackageFactory.Guevara

  # Install the node dependencies, and prune it to remove extranous packages from previous/cached runs.
  - npm install
  - npm prune

#
# In case a script has failed, we want a more precise output by Travis CI on which script has exited with `0`.
# If we stick with the basic `npm test` command, we would only get the message `The script npm test has exited with code 0`
# which isn't that informative at all.
#
script:
  # Since the karma task is enduring a big time span, we execute it in
  # parallel to the lint task to reduce the overall time for each CI build.
  - npm run lint & npm run karma

  # After the unit tests have been executed, we can continue with the behavior tests.
  - npm run selenium:run

#
# Publish the code coverage to codeclimate.com once the tests have passed.
#
after_script:
  - npm install -g codeclimate-test-reporter
  - mv Coverage/**/lcov.info .
  - codeclimate-test-reporter < lcov.info
